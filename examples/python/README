Calling FPGALink from Python

Linux x86_64:
  dd of=/var/tmp/foo.dat if=/dev/urandom bs=65536 count=160
  sudo LD_LIBRARY_PATH=../../linux.x86_64/rel ./fpgalink.py ../../gen_xsvf/nexys2.xsvf /var/tmp/foo.dat 1443:0005

Linux i686:
  dd of=/var/tmp/foo.dat if=/dev/urandom bs=65536 count=160
  sudo LD_LIBRARY_PATH=../../linux.i686/rel ./fpgalink.py ../../gen_xsvf/nexys2.xsvf /var/tmp/foo.dat 1443:0005

MacOS:
  dd of=/var/tmp/foo.dat if=/dev/urandom bs=65536 count=160
  DYLD_LIBRARY_PATH=../../darwin/rel ./fpgalink.py ../../gen_xsvf/nexys2.xsvf /var/tmp/foo.dat 1443:0005

Windows (assuming you're running from http://bit.ly/k0ydbN):
  dd of=/var/tmp/foo.dat if=/dev/urandom bs=65536 count=160
  PATH=../../win32/rel:$PATH /c/Python27/python fpgalink.py ../../gen_xsvf/nexys2.xsvf /var/tmp/foo.dat 1443:0005

This connects to the device at 1443:0005 (hopefully a Digilent Nexys2), loads the onboard FX2 chip
with a new firmware, loads the nexys2.xsvf design into the board's FPGA, and then does some register
reads and writes. The changes to the board are lost on the next power cycle, so it's safe to try.

You can also use it in interactive mode (Linux x86_64):
  chris@wotan$ sudo LD_LIBRARY_PATH=../../linux.x86_64/rel python
  Python 2.6.6 (r266:84292, Sep 15 2010, 15:52:39) 
  [GCC 4.4.5] on linux2
  Type "help", "copyright", "credits" or "license" for more information.
  >>> from fpgalink import *
  >>> flLoadStandardFirmware("1443:0005", "1443:0005")
  >>> handle = flOpen("1443:0005")
  >>> flPlayXSVF(handle, "../../gen_xsvf/nexys2.xsvf")
  >>> flWriteRegister(handle, 1000, 0x00, 0x10)
  >>> flClose(handle)
  >>> 
  chris@wotan$ 

And the same on Linux i686:
  chris@wotan$ sudo LD_LIBRARY_PATH=../../linux.i686/rel python

And MacOS:
  chris@macca$ DYLD_LIBRARY_PATH=../../darwin/rel python

And Windows (assuming you're running from http://bit.ly/k0ydbN):
  chris@win7$ PATH=../../win32/rel:$PATH /c/Python27/python
