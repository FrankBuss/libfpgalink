CALLING FPGALINK FROM PYTHON

The examples below assume your device is a 1200K Digilent Nexys2. For Atlys & Nexys3, remove the
"-p" option, replace "1443:0005" with "1443:0007" and choose the appropriate XSVF file for your
board.

    FPGALink Python Example Copyright (C) 2011 Chris McClelland

    usage: fpgalink.py [-h] [-p] [-s] -v <VID:PID> [-i <VID:PID>] [-x <xsvfFile>]
                       [-f <dataFile>]

    Load FX2 firmware, load the FPGA, interact with the FPGA.

    optional arguments:
      -h, --help     show this help message and exit
      -p             FPGA is powered from USB (Nexys2 only!)
      -s             scan the JTAG chain
      -v <VID:PID>   renumerated vendor and product ID of the FPGALink device
      -i <VID:PID>   initial vendor and product ID of the FPGALink device
      -x <xsvfFile>  XSVF file to play into the JTAG chain
      -f <dataFile>  binary data to write to register 0

Linux x86_64:
  dd of=/var/tmp/foo.dat if=/dev/urandom bs=65536 count=160
  sudo LD_LIBRARY_PATH=../../linux.x86_64/rel ./fpgalink.py -p -s -v 1443:0005 -i 1443:0005 -x ../../gen_xsvf/nexys2-1200.xsvf -f /var/tmp/foo.dat

Linux i686:
  dd of=/var/tmp/foo.dat if=/dev/urandom bs=65536 count=160
  sudo LD_LIBRARY_PATH=../../linux.i686/rel ./fpgalink.py -p -s -v 1443:0005 -i 1443:0005 -x ../../gen_xsvf/nexys2-1200.xsvf -f /var/tmp/foo.dat

Linux ppc:
  dd of=/var/tmp/foo.dat if=/dev/urandom bs=65536 count=160
  sudo LD_LIBRARY_PATH=../../linux.ppc/rel ./fpgalink.py -p -s -v 1443:0005 -i 1443:0005 -x ../../gen_xsvf/nexys2-1200.xsvf -f /var/tmp/foo.dat

  NOTE: With Python 2.5 & 2.6 you will need to install the argparse module, thus:
    wget -qO- 'http://argparse.googlecode.com/files/argparse-1.2.1.tar.gz' | tar zxf -
    sudo cp argparse-1.2.1/argparse.py /usr/lib/python2.5/site-packages/

MacOSX:
  dd of=/var/tmp/foo.dat if=/dev/urandom bs=65536 count=160
  DYLD_LIBRARY_PATH=../../darwin/rel ./fpgalink.py -p -s -v 1443:0005 -i 1443:0005 -x ../../gen_xsvf/nexys2-1200.xsvf -f /var/tmp/foo.dat

  NOTE: On Snow Leopard you will need to install the argparse module (not required for Lion), thus:
    curl -sL 'http://argparse.googlecode.com/files/argparse-1.2.1.tar.gz' | tar zxf -
    cd argparse-1.2.1/
    sudo python setup.py install

Windows (assuming you're running from http://bit.ly/k0ydbN):
  dd of=/var/tmp/foo.dat if=/dev/urandom bs=65536 count=160
  PATH=../../win32/rel:$PATH /c/Python27/python fpgalink.py -p -s -v 1443:0005 -i 1443:0005 -x ../../gen_xsvf/nexys2-1200.xsvf -f /var/tmp/foo.dat

This connects to the device at 1443:0005 (hopefully a 1200K Digilent Nexys2), loads the onboard FX2
chip with a new firmware, loads the nexys2-1200.xsvf design into the board's FPGA, and then does
some register reads and writes. The changes to the board are lost on the next power cycle, so it's
safe to try.

You can also use it in interactive mode (Linux x86_64):
  chris@wotan$ sudo LD_LIBRARY_PATH=../../linux.x86_64/rel python
  Python 2.7.1+ (r271:86832, Apr 11 2011, 18:13:53)
  [GCC 4.5.2] on linux2
  Type "help", "copyright", "credits" or "license" for more information.
  >>> from fpgalink import *
  >>> flLoadStandardFirmware("1443:0005", "1443:0005")       # 1443:0007 for Nexys3 & Atlys
  >>> handle = flOpen("1443:0005")
  >>> flPortAccess(handle, 0x0080, 0x0080)                   # Skip this for Nexys3 & Atlys
  >>> flPlayXSVF(handle, "../../gen_xsvf/nexys2-1200.xsvf")  # Or atlys.xsvf/nexys3.xsvf
  >>> flWriteRegister(handle, 1000, 0x00, 0x10)
  >>> flClose(handle)
  >>> 
  chris@wotan$ 

And the same on Linux i686:
  chris@wotan$ sudo LD_LIBRARY_PATH=../../linux.i686/rel python

And the same on Linux ppc:
  chris@wotan$ sudo LD_LIBRARY_PATH=../../linux.ppc/rel python

And MacOS:
  chris@macca$ DYLD_LIBRARY_PATH=../../darwin/rel python

And Windows (assuming you're running from http://bit.ly/k0ydbN):
  chris@win7$ PATH=../../win32/rel:$PATH /c/Python27/python
